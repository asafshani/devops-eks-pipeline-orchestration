pipeline {
  agent any

  parameters {
    choice(
      name: 'action',
      choices: ['terraform init', 'terraform plan', 'terraform apply', 'terraform destroy'],
      description: '''Select the Terraform action to perform:

- terraform init: Initializes the Terraform working directory. Downloads providers and sets up backend.
- terraform plan: Creates an execution plan, showing what Terraform will do without making changes.
- terraform apply: Applies changes to your infrastructure as defined by your .tf files.
- terraform destroy: Destroys all resources managed by Terraform in the current config. Use with caution!'''
    )
  }

  stages {
    stage('Inject AWS Credentials') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: '5ccc6ba5-8604-4d45-afd2-e653e0bbe9ad',
            usernameVariable: 'AWS_ACCESS_KEY_ID',
            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
          )
        ]) {
          sh 'aws sts get-caller-identity'
          git branch: 'main',
              url: 'https://github.com/asafshani/terraform-aws-networking.git'

          // Conditional logic for selected action
          script {
            if (params.action == 'terraform init') {
              sh 'terraform init'
            } else if (params.action == 'terraform plan') {
              sh 'terraform init'
              sh 'terraform plan -out=tfplan'
            } else if (params.action == 'terraform apply') {
              sh 'terraform init'
              sh 'terraform plan -out=tfplan'
              sh 'terraform apply -auto-approve tfplan'
            } else if (params.action == 'terraform destroy') {
              sh 'terraform init'
              sh 'terraform destroy -auto-approve'
            }
          }
        }
      }
    }
  }

  post {
    success {
      echo "Terraform '${params.action}' completed successfully."
      // Optional: Trigger Ansible job only on apply
      script {
        if (params.action == 'terraform apply') {
          build job: 'ansible-pipeline'
        }
      }
    }

    failure {
      echo "Terraform '${params.action}' failed. Check console output for details."
    }

    always {
      echo 'Terraform pipeline finished.'
    }
  }
}
