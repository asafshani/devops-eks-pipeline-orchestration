pipeline {
  agent any

  parameters {
    choice(name: 'ACTION', choices: ['init', 'validate', 'plan', 'apply', 'destroy'], description: 'Terraform action to perform')
    choice(name: 'AWS_REGION', choices: ['us-east-1', 'us-west-2', 'eu-central-1'], description: 'AWS Region')
    choice(name: 'AVAILABILITY_ZONE', choices: ['us-east-1a', 'us-west-2a', 'eu-central-1a'], description: 'Availability Zone')
    string(name: 'VPC_CIDR', defaultValue: '10.0.0.0/16', description: 'VPC CIDR Block')
    string(name: 'PUBLIC_SUBNET_CIDR', defaultValue: '10.0.1.0/24', description: 'Public Subnet CIDR')
    string(name: 'PRIVATE_SUBNET_CIDR', defaultValue: '10.0.2.0/24', description: 'Private Subnet CIDR')
    string(name: 'CLUSTER_NAME', defaultValue: 'my-eks-cluster', description: 'EKS Cluster Name')
    choice(name: 'KUBERNETES_VERSION', choices: ['1.26', '1.27', '1.28'], description: 'Kubernetes Version')
    choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Deployment Environment')
  }

  environment {
    TF_WORKDIR = 'terraform-config'
  }

  stages {
    stage('Clone Terraform Configuration Repo') {
      steps {
        dir("${env.TF_WORKDIR}") {
          git url: 'https://github.com/asafshani/terraform-aws-networking.git', branch: 'main'
        }
      }
    }

    stage('Terraform Init') {
      when { expression { params.ACTION == 'init' } }
      steps {
        dir("${env.TF_WORKDIR}") {
          sh 'terraform init'
        }
      }
    }

    stage('Terraform Validate') {
      when { expression { params.ACTION == 'validate' } }
      steps {
        dir("${env.TF_WORKDIR}") {
          sh 'terraform validate'
        }
      }
    }

    stage('Terraform Plan') {
      when { expression { params.ACTION == 'plan' } }
      steps {
        dir("${env.TF_WORKDIR}") {
          sh """
            terraform plan -out=tfplan \\
              -var="aws_region=${params.AWS_REGION}" \\
              -var="availability_zone=${params.AVAILABILITY_ZONE}" \\
              -var="vpc_cidr=${params.VPC_CIDR}" \\
              -var="public_subnet_cidr=${params.PUBLIC_SUBNET_CIDR}" \\
              -var="private_subnet_cidr=${params.PRIVATE_SUBNET_CIDR}" \\
              -var="cluster_name=${params.CLUSTER_NAME}" \\
              -var="kubernetes_version=${params.KUBERNETES_VERSION}" \\
              -var="environment=${params.ENVIRONMENT}"
          """
        }
      }
    }

    stage('Terraform Apply') {
      when { expression { params.ACTION == 'apply' } }
      steps {
        dir("${env.TF_WORKDIR}") {
          sh 'terraform apply -auto-approve tfplan'
        }
      }
    }

    stage('Terraform Destroy') {
      when { expression { params.ACTION == 'destroy' } }
      steps {
        dir("${env.TF_WORKDIR}") {
          sh 'terraform destroy -auto-approve'
        }
      }
    }
  }

  post {
    failure {
      echo "Pipeline failed during ${params.ACTION} stage."
    }
    success {
      echo "Pipeline successfully completed the ${params.ACTION} stage."
    }
    aborted {
      echo "Pipeline was aborted by user during ${params.ACTION}."
    }
  }
}
