pipeline {
  agent any

  parameters {
    choice(name: 'AWS_REGION', choices: ['il-central-1', 'us-west-2', 'eu-central-1'], description: 'AWS region')
    choice(name: 'AVAILABILITY_ZONE', choices: ['il-central-1a', 'il-central-1b', 'il-central-1c'], description: 'Availability Zone')
    string(name: 'VPC_CIDR', defaultValue: '10.0.0.0/16', description: 'CIDR block for the VPC')
    string(name: 'PUBLIC_SUBNET_CIDR', defaultValue: '10.0.1.0/24', description: 'CIDR for the public subnet')
    string(name: 'PRIVATE_SUBNET_CIDR', defaultValue: '10.0.2.0/24', description: 'CIDR for the private subnet')
    string(name: 'CLUSTER_NAME', defaultValue: 'my-eks-cluster', description: 'EKS Cluster Name')
    choice(name: 'KUBERNETES_VERSION', choices: ['1.26', '1.27', '1.28'], description: 'Kubernetes version')
    choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Deployment environment')
  }

  environment {
    TF_WORKDIR = 'terraform' // adjust this if your Terraform config is in a subfolder
  }

  stages {
    stage('Terraform Init') {
      steps {
        dir("${env.TF_WORKDIR}") {
          sh 'terraform init'
        }
      }
    }

    stage('Terraform Plan') {
      steps {
        dir("${env.TF_WORKDIR}") {
          sh """
            terraform plan -out=tfplan \\
              -var="aws_region=${params.AWS_REGION}" \\
              -var="availability_zone=${params.AVAILABILITY_ZONE}" \\
              -var="vpc_cidr=${params.VPC_CIDR}" \\
              -var="public_subnet_cidr=${params.PUBLIC_SUBNET_CIDR}" \\
              -var="private_subnet_cidr=${params.PRIVATE_SUBNET_CIDR}" \\
              -var="cluster_name=${params.CLUSTER_NAME}" \\
              -var="kubernetes_version=${params.KUBERNETES_VERSION}" \\
              -var="environment=${params.ENVIRONMENT}"
          """
        }
      }
    }

    stage('Terraform Apply (Optional)') {
      when {
        expression { return params.ENVIRONMENT != 'dev' }
      }
      steps {
        input message: "Are you sure you want to apply this plan to ${params.ENVIRONMENT}?"
        dir("${env.TF_WORKDIR}") {
          sh 'terraform apply tfplan'
        }
      }
    }
  }
}
