pipeline {
  agent any

  parameters {
    choice(
      name: 'action',
      choices: [
        'terraform init',
        'terraform validate',
        'terraform plan',
        'terraform apply',
        'terraform destroy'
      ],
      description: '''Select the Terraform action to perform:

- terraform validate: Checks whether your configuration is syntactically valid and internally consistent.
- terraform init: Initializes the working directory, downloads providers, and configures the backend.
- terraform plan: Generates an execution plan showing proposed infrastructure changes.
- terraform apply: Applies the proposed changes to AWS infrastructure.
- terraform destroy: Destroys all infrastructure managed by Terraform in this configuration.'''
    )
  }

  stages {
    stage('Run Terraform Action') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: '5ccc6ba5-8604-4d45-afd2-e653e0bbe9ad',
            usernameVariable: 'AWS_ACCESS_KEY_ID',
            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
          )
        ]) {
          // Debug identity for confirmation
          sh 'aws sts get-caller-identity'

          // Checkout Terraform repo
          git branch: 'main',
              url: 'https://github.com/asafshani/terraform-aws-networking.git'

          // Execute based on user-selected action
          script {
            if (params.action == 'terraform validate') {
              sh 'terraform validate'
            } else if (params.action == 'terraform init') {
              sh 'terraform init'
            } else if (params.action == 'terraform plan') {
              sh 'terraform init'
              sh 'terraform plan -out=tfplan'
            } else if (params.action == 'terraform apply') {
              sh 'terraform init'
              sh 'terraform plan -out=tfplan'
              sh 'terraform apply -auto-approve tfplan'
            } else if (params.action == 'terraform destroy') {
              sh 'terraform init'
              sh 'terraform destroy -auto-approve'
            }
          }
        }
      }
    }
  }

  post {
    success {
      echo "Terraform '${params.action}' completed successfully."

      // Trigger Ansible pipeline only if apply was selected
      script {
        if (params.action == 'terraform apply') {
          build job: 'ansible-pipeline'
        }
      }
    }

    failure {
      echo "Terraform '${params.action}' failed. Check logs for details."
    }

    always {
      echo 'Terraform pipeline finished.'
    }
  }
}
